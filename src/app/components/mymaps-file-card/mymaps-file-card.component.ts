import { Component, Input, Output, EventEmitter } from '@angular/core';
import { DocumentService } from '../../services/document.service';
import { MapShareService } from '../../services/map-share.service';
import { NavController } from '@ionic/angular';
import { IonicModule } from '@ionic/angular';
import { MapService } from '../../services/map.service';
import { AuthService } from '../../services/auth.service';
import { ErrorHandlerService } from '../../services/error-handler.service';
import { switchMap } from 'rxjs/operators';

@Component({
  selector: 'app-mymaps-file-card',
  templateUrl: './mymaps-file-card.component.html',
  styleUrls: ['./mymaps-file-card.component.scss'],
  standalone: false
})
export class MymapsFileCardComponent  {
  @Input() file: any;
  @Output() cardClick = new EventEmitter<string>();
  @Output() deleted = new EventEmitter<void>();
  @Output() reloadTabs = new EventEmitter<void>();

  isDeleting = false;
  isPublishing = false;
  isShared = false;

  constructor(
    private navCtrl: NavController,
    private mapService: MapService,
    private mapShareService: MapShareService,
    private authService: AuthService,
    private errorHandler: ErrorHandlerService
  ) { }

  ngOnInit() {
    // Tr·∫°ng th√°i public: share = true (ƒë√£ public, x√°m m√†u), share = false (private, s√°ng m√†u)
    // H·ªó tr·ª£ c·∫£ c·∫•u tr√∫c d·ªØ li·ªáu c≈© v√† m·ªõi
    this.isShared = this.file?.share === true;
    
    console.log('=== FILE DATA INIT ===');
    console.log('File:', this.file);
    console.log('Share status:', this.isShared);
    console.log('File share property:', this.file?.share);
    console.log('========================');
  }

  // Method ƒë·ªÉ l·∫•y URL ·∫£nh, h·ªó tr·ª£ c·∫£ img v√† image_url
  getImageUrl(): string | null {
    if (!this.file) return null;
    
    // ∆Øu ti√™n image_url tr∆∞·ªõc, sau ƒë√≥ m·ªõi ƒë·∫øn img
    if (this.file.image_url && this.file.image_url.trim() !== '') {
      return this.file.image_url;
    }
    
    if (this.file.img && this.file.img.trim() !== '') {
      // N·∫øu img l√† base64, th√™m prefix
      if (this.file.img.startsWith('data:')) {
        return this.file.img;
      }
      // N·∫øu l√† URL, tr·∫£ v·ªÅ tr·ª±c ti·∫øp
      if (this.file.img.startsWith('http')) {
        return this.file.img;
      }
      // N·∫øu l√† base64 kh√¥ng c√≥ prefix, th√™m prefix
      return `data:image/jpeg;base64,${this.file.img}`;
    }
    
    return null;
  }

  // Method x·ª≠ l√Ω l·ªói khi load ·∫£nh
  onImageError(event: any) {
    console.log('L·ªói load ·∫£nh:', event);
    // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω l·ªói ·ªü ƒë√¢y
  }

  // khi click v√†o th·∫ª, s·∫Ω chuy·ªÉn ƒë·∫øn trang explore v√† hi·ªÉn th·ªã b·∫£n ƒë·ªì
  onClickCard() {
    // S·ª≠ d·ª•ng tr∆∞·ªùng id (d·ª±a tr√™n c·∫•u tr√∫c d·ªØ li·ªáu th·ª±c t·∫ø)
    const mapId = this.file?.id || this.file?.map_id || this.file?.mapId;
    
    if (this.file && mapId) {
      this.mapShareService.setMapId(mapId.toString());
      this.navCtrl.navigateRoot(['/tabs/tab1']);
    }
    // Khi th·∫ª ƒë∆∞·ª£c b·∫•m, ph√°t ra(evenemiter) s·ª± ki·ªán k√®m theo ID c·ªßa t·ªáp
    if (this.file && this.file.id) {
      this.cardClick.emit(this.file.id);//emit() h√†m g·ª≠i th√¥ng b√°o s·ª± ki·ªán click v√† g·ª≠i id c·ªßa t√†i li·ªáu
    }
  }

  // Ph∆∞∆°ng th·ª©c c·∫Øt ng·∫Øn vƒÉn b·∫£n v√† th√™m d·∫•u ba ch·∫•m
  truncateText(text: string, maxLength: number = 35): string {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  }

  truncateName(text: string, maxLength: number = 25): string {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  }

  onDeleteMap(event: Event) {
    event.stopPropagation();
    
    // S·ª≠ d·ª•ng tr∆∞·ªùng id (d·ª±a tr√™n c·∫•u tr√∫c d·ªØ li·ªáu th·ª±c t·∫ø)
    const mapId = this.file?.id || this.file?.map_id || this.file?.mapId;
    
    if (this.file && mapId) {
      if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·∫£n ƒë·ªì n√†y?')) {
        this.isDeleting = true;
        
        // S·ª≠ d·ª•ng ErrorHandlerService v·ªõi retry logic
        this.errorHandler.withRetry(() => 
          this.mapService.deleteMap(mapId.toString())
        ).subscribe({
          next: () => {
            this.isDeleting = false;
            alert('X√≥a b·∫£n ƒë·ªì th√†nh c√¥ng!');
            this.deleted.emit();
          },
          error: (err) => {
            this.isDeleting = false;
            const errorMessage = this.errorHandler.handleError(err);
            alert(errorMessage);
            console.error('L·ªói x√≥a b·∫£n ƒë·ªì:', err);
          }
        });
      }
    }
  }

  onShareMap(event: Event) {
    event.stopPropagation();
    
    // S·ª≠ d·ª•ng tr∆∞·ªùng id (d·ª±a tr√™n c·∫•u tr√∫c d·ªØ li·ªáu th·ª±c t·∫ø)
    const mapId = this.file?.id || this.file?.map_id || this.file?.mapId;
    
    console.log('=== SHARE MAP DEBUG ===');
    console.log('File data:', this.file);
    console.log('Map ID:', mapId);
    console.log('Current share status:', this.isShared);
    console.log('File share property:', this.file?.share);
    console.log('========================');
    
    if (this.file && mapId) {
      // Ki·ªÉm tra map_id c√≥ ph·∫£i l√† s·ªë h·ª£p l·ªá kh√¥ng
      const mapIdInt = parseInt(mapId.toString());
      if (isNaN(mapIdInt)) {
        alert('Map ID kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
        return;
      }
      
      // X√°c ƒë·ªãnh h√†nh ƒë·ªông d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i
      const currentStatus = this.isShared;
      const actionText = currentStatus ? 'chuy·ªÉn v·ªÅ private' : 'public';
      
      if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën ${actionText} b·∫£n ƒë·ªì n√†y?`)) {
        this.isPublishing = true;
        
        // S·ª≠ d·ª•ng ErrorHandlerService v·ªõi retry logic
        this.errorHandler.withRetry(() => {
          if (!currentStatus) {
            // Ch∆∞a public -> Public: S·ª≠ d·ª•ng endpoint /template/ v·ªõi POST
            console.log('üîÑ Public map t·ª´ private sang template...');
            
            // Th·ª≠ test endpoint tr∆∞·ªõc n·∫øu c·∫ßn debug
            if (confirm('B·∫°n c√≥ mu·ªën test c√°c endpoint kh√°c nhau kh√¥ng?')) {
              return this.mapService.testPublicMap(mapIdInt.toString());
            }
            
            return this.mapService.toPublicMap(mapIdInt.toString());
          } else {
            // ƒê√£ public -> Private: S·ª≠ d·ª•ng endpoint /map/?map_id v·ªõi PUT
            console.log('üîÑ Chuy·ªÉn map t·ª´ public v·ªÅ private...');
            return this.mapService.toPrivateMap(mapIdInt.toString());
          }
        }).subscribe({
          next: (response) => {
            this.isPublishing = false;
            this.isShared = !currentStatus; // Toggle tr·∫°ng th√°i local
            this.file.share = !currentStatus; // C·∫≠p nh·∫≠t tr·∫°ng th√°i file
            const newStatus = !currentStatus ? 'public' : 'private';
            console.log('‚úÖ Share action th√†nh c√¥ng:', response);
            alert(`Chuy·ªÉn b·∫£n ƒë·ªì sang ${newStatus} th√†nh c√¥ng!`);
            this.reloadTabs.emit();
          },
          error: (err) => {
            this.isPublishing = false;
            const errorMessage = this.errorHandler.handleError(err);
            console.error('‚ùå Share action th·∫•t b·∫°i:', err);
            alert(errorMessage);
            console.error('L·ªói toggle map share:', err);
          }
        });
      }
    } else {
      console.error('Kh√¥ng t√¨m th·∫•y Map ID');
    }
  }

}
